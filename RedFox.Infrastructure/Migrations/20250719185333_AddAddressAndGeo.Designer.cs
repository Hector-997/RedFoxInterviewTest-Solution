// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedFox.Infrastructure;

#nullable disable

namespace RedFox.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250719185333_AddAddressAndGeo")]
    partial class AddAddressAndGeo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("RedFox.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CatchPhrase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RedFox.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RedFox.Domain.Entities.User", b =>
                {
                    b.HasOne("RedFox.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RedFox.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Street");

                            b1.Property<string>("Suite")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Suite");

                            b1.Property<string>("Zipcode")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Zipcode");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("RedFox.Domain.ValueObjects.Geolocation", "Geo", b2 =>
                                {
                                    b2.Property<int>("AddressUserId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Latitude")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("GeoLat");

                                    b2.Property<string>("Longitude")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("GeoLng");

                                    b2.HasKey("AddressUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressUserId");
                                });

                            b1.Navigation("Geo")
                                .IsRequired();
                        });

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RedFox.Domain.Entities.Company", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
